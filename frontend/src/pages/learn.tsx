import { useState, useEffect } from 'react';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import { 
  Box, 
  Card, 
  CardContent, 
  Typography, 
  Button, 
  Stack, 
  IconButton,
  Paper,
  Container
} from '@mui/material';
import { ArrowBack, ArrowForward, Home } from '@mui/icons-material';
import { useCardsStore } from '@/shared/store/cardsStore';

export const LearnPage = () => {
  const { folderId } = useParams<{ folderId: string }>();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { cards, fetchCards, updateCardLearnStatus } = useCardsStore();
  
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [showOnlyUnlearned, setShowOnlyUnlearned] = useState(false);

  useEffect(() => {
    if (folderId) {
      fetchCards(folderId);
    }
  }, [folderId, fetchCards]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä mode –≤ URL
    const mode = searchParams.get('mode');
    if (mode === 'unlearned') {
      setShowOnlyUnlearned(true);
    }
  }, [searchParams]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  useEffect(() => {
    setCurrentIndex(0);
    setShowAnswer(false);
  }, [showOnlyUnlearned]);

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
      setShowAnswer(false);
    }
  };

  const handleNext = () => {
    if (currentIndex < displayCards.length - 1) {
      setCurrentIndex(currentIndex + 1);
      setShowAnswer(false);
    }
  };

  const handleKnow = async () => {
    if (displayCards[currentIndex]) {
      await updateCardLearnStatus(displayCards[currentIndex].id, true);
      
      // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ "—Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ", –∫–∞—Ä—Ç–æ—á–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
      if (showOnlyUnlearned) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const updatedCards = cards.filter(card => !card.isLearned);
        if (currentIndex >= updatedCards.length - 1) {
          // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—ë –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫
          setCurrentIndex(updatedCards.length);
        } else {
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ (–∏–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–¥–≤–∏–Ω—É–ª—Å—è)
          setShowAnswer(false);
        }
      } else {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        if (currentIndex < displayCards.length - 1) {
          handleNext();
        } else {
          setCurrentIndex(displayCards.length);
          setShowAnswer(false);
        }
      }
    }
  };

  const handleDontKnow = async () => {
    if (displayCards[currentIndex]) {
      await updateCardLearnStatus(displayCards[currentIndex].id, false);
      
      // –í —Ä–µ–∂–∏–º–µ "—Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ" –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ
      if (showOnlyUnlearned) {
        if (currentIndex < displayCards.length - 1) {
          handleNext();
        } else {
          setCurrentIndex(displayCards.length);
          setShowAnswer(false);
        }
      } else {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if (currentIndex < displayCards.length - 1) {
          handleNext();
        } else {
          setCurrentIndex(displayCards.length);
          setShowAnswer(false);
        }
      }
    }
  };

  const toggleAnswer = () => {
    setShowAnswer(!showAnswer);
  };

  const handleBackToFolder = () => {
    navigate('/');
  };

  const handleContinueLearning = () => {
    setShowOnlyUnlearned(true);
    setCurrentIndex(0);
    setShowAnswer(false);
  };

  if (!cards.length) {
    return (
      <Container maxWidth="md" sx={{ mt: 4 }}>
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" gutterBottom>
            –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
          </Typography>
          <Button 
            variant="contained" 
            startIcon={<Home />}
            onClick={handleBackToFolder}
            sx={{ mt: 2 }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–ø–∫–∞–º
          </Button>
        </Paper>
      </Container>
    );
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const displayCards = showOnlyUnlearned ? cards.filter(card => !card.isLearned) : cards;

  // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ "—Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã–µ" –∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã—É—á–µ–Ω—ã
  if (showOnlyUnlearned && displayCards.length === 0) {
    return (
      <Container maxWidth="md" sx={{ mt: 4 }}>
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" gutterBottom>
            üéâ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ –≤—ã—É—á–µ–Ω—ã!
          </Typography>
          <Button 
            variant="contained" 
            onClick={handleBackToFolder}
            sx={{ mt: 2 }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–ø–∫–∞–º
          </Button>
        </Paper>
      </Container>
    );
  }
  const currentCard = displayCards[currentIndex];
  const isFirst = currentIndex === 0;
  const isCompleted = currentIndex === displayCards.length;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
  if (!isCompleted && (currentIndex >= displayCards.length || !currentCard)) {
    return (
      <Container maxWidth="md" sx={{ mt: 4 }}>
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" gutterBottom>
            –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          </Typography>
          <Button 
            variant="contained" 
            onClick={handleBackToFolder}
            sx={{ mt: 2 }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–ø–∫–∞–º
          </Button>
        </Paper>
      </Container>
    );
  }

  return (
    <Container maxWidth="md" sx={{ mt: 4 }}>
      <Paper sx={{ p: 3 }}>
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Å—á–µ—Ç—á–∏–∫ */}
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
          <Button 
            startIcon={<Home />}
            onClick={handleBackToFolder}
            variant="outlined"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è
          </Button>
          
          <Typography variant="h6">
            {isCompleted ? `${displayCards.length} / ${displayCards.length}` : `${currentIndex + 1} / ${displayCards.length}`}
          </Typography>
          
          <Box display="flex" gap={1}>
            <IconButton 
              onClick={handlePrevious} 
              disabled={isFirst}
              size="small"
            >
              <ArrowBack />
            </IconButton>
            <IconButton 
              onClick={handleNext} 
              disabled={isCompleted}
              size="small"
            >
              <ArrowForward />
            </IconButton>
          </Box>
        </Box>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
        {isCompleted ? (
          <Box textAlign="center" mt={4}>
            <Typography variant="h6" gutterBottom>
              üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ!
            </Typography>
            <Stack direction="row" spacing={2} justifyContent="center" sx={{ mt: 3 }}>
              <Button 
                variant="outlined" 
                onClick={handleBackToFolder}
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–ø–∫–∞–º
              </Button>
              {!showOnlyUnlearned && cards.some(card => !card.isLearned) && (
                <Button 
                  variant="contained" 
                  onClick={handleContinueLearning}
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ
                </Button>
              )}
            </Stack>
          </Box>
        ) : (
          <>
            <Card 
              sx={{ 
                minHeight: 300, 
                display: 'flex', 
                alignItems: 'center',
                cursor: 'pointer',
                '&:hover': {
                  boxShadow: 3
                }
              }}
              onClick={toggleAnswer}
            >
              <CardContent sx={{ width: '100%', textAlign: 'center' }}>
                <Typography variant="h6" gutterBottom>
                  {showAnswer ? '–û—Ç–≤–µ—Ç:' : '–í–æ–ø—Ä–æ—Å:'}
                </Typography>
                <Typography variant="h4" sx={{ mb: 3 }}>
                  {showAnswer ? currentCard.answer : currentCard.question}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {showAnswer ? '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–æ–ø—Ä–æ—Å' : '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç'}
                </Typography>
              </CardContent>
            </Card>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <Stack direction="row" spacing={2} justifyContent="center" sx={{ mt: 3 }}>
              <Button 
                variant="contained" 
                color="error"
                onClick={handleDontKnow}
                size="large"
              >
                –ù–µ –∑–Ω–∞—é
              </Button>
              <Button 
                variant="contained" 
                color="success"
                onClick={handleKnow}
                size="large"
              >
                –ó–Ω–∞—é
              </Button>
            </Stack>
          </>
        )}
      </Paper>
    </Container>
  );
};